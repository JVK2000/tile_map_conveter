def get_id_mapping():
    tile_data_gd43 = [0, 0, 0, 1, 10, 0, 2, 5, 0, 3, 3, 0, 4, 4, 0, 5, 6, 0, 6, 1, 0, 7, 1, 1, 8, 1, 2, 9, 1, 3, 10, 7, 0, 11, 2, 0, 12, 9, 0, 13, 8, 0, 65542, 1, 1, 65543, 65537, 1, 65544, 131073, 1, 65545, 196609, 1, 65546, 7, 1, 65547, 65538, 0, 65549, 8, 1, 131078, 1, 2, 131079, 65537, 2, 131080, 131073, 2, 131081, 196609, 2, 131082, 7, 2, 131083, 131074, 0, 131085, 8, 2, 196614, 1, 3, 196615, 65537, 3, 196616, 131073, 3, 196617, 196609, 3, 196619, 196610, 0]
    tile_data_gd35 = [0, 0, 0, 1, 17, 0, 2, 19, 0, 3, 14, 0, 4, 15, 0, 5, 18, 0, 6, 1, 0, 7, 1, 1, 8, 1, 2, 9, 1, 3, 10, 11, 0, 11, 21, 0, 12, 16, 0, 13, 13, 0, 65542, 1, 65536, 65543, 1, 65537, 65544, 1, 65538, 65545, 1, 65539, 65546, 11, 65536, 65547, 21, 1, 65549, 13, 65536, 131078, 1, 131072, 131079, 1, 131073, 131080, 1, 131074, 131081, 1, 131075, 131082, 11, 131072, 131083, 21, 2, 131085, 13, 131072, 196614, 1, 196608, 196615, 1, 196609, 196616, 1, 196610, 196617, 1, 196611, 196619, 21, 3]

    num_gd35_tiles = len(tile_data_gd35) // 3
    num_gd43_tiles = len(tile_data_gd43) // 3

    #print("num_gd35_tiles: ", num_gd35_tiles)
    #print("num_gd43_tiles: ", num_gd43_tiles)

    num_gd35_tile_pos = tile_data_gd35[::3]
    num_gd43_tile_pos = tile_data_gd43[::3]
    num_gd35_tile_ids = tile_data_gd35[1::3]
    num_gd43_tile_ids = tile_data_gd43[1::3]
    num_gd35_tile_alt = tile_data_gd35[2::3]
    num_gd43_tile_alt = tile_data_gd43[2::3]

    #print("35 ids: ", num_gd35_tile_ids)
    #print("43 ids: ", num_gd43_tile_ids)
    #print("35 pos: ", num_gd35_tile_pos)
    #print("43 pos: ", num_gd43_tile_pos)
    #print("35 alt: ", num_gd35_tile_alt)
    #print("43 alt: ", num_gd43_tile_alt)

    id_map = {}

    for i in range(num_gd35_tiles):
        gd43_i = num_gd43_tile_pos.index(num_gd35_tile_pos[i])
        gd35_tuple = (num_gd35_tile_ids[i], num_gd35_tile_alt[i])
        gd45_tuple = (num_gd43_tile_ids[gd43_i], num_gd43_tile_alt[gd43_i])
        id_map[gd35_tuple] = gd45_tuple

    print("id map: ", id_map) # print id map:  {(0, 0): (0, 0), (17, 0): (10, 0), (19, 0): (5, 0), (14, 0): (3, 0), ... }
    return id_map

to_convet = [-1376244, 1, 65537, -1376243, 1, 65538, -1376242, 1, 65538, -1376241, 1, 65538, -1376240, 1, 65539, -1376239, 21, 3, -1310712, 1, 65537, -1310711, 1, 65538, -1310710, 1, 65538, -1310709, 1, 65538, -1310708, 1, 131074, -1310707, 1, 131074, -1310706, 1, 131074, -1310705, 1, 131074, -1310704, 1, 131074, -1310703, 1, 65538, -1310702, 1, 65539, -1245179, 21, 3, -1245178, 1, 65537, -1245177, 1, 65538, -1245176, 1, 131074, -1245175, 1, 131074, -1245174, 1, 131074, -1245173, 1, 131074, -1245172, 1, 131074, -1245171, 1, 131074, -1245170, 1, 131074, -1245169, 1, 131074, -1245168, 1, 131074, -1245167, 1, 196610, -1245166, 1, 196611, -1179643, 1, 65537, -1179642, 1, 131074, -1179641, 1, 131074, -1179640, 1, 131074, -1179639, 1, 131074, -1179638, 1, 131074, -1179637, 1, 131074, -1179636, 1, 131074, -1179635, 1, 131074, -1179634, 1, 131074, -1179633, 1, 131074, -1179632, 1, 196611, -1114108, 1, 65537, -1114107, 1, 131074, -1114106, 1, 131074, -1114105, 1, 131074, -1114104, 1, 131074, -1114103, 1, 196610, -1114102, 1, 196610, -1114101, 1, 196610, -1114100, 1, 196610, -1114099, 1, 131074, -1114098, 1, 131074, -1114097, 1, 131075, -1114090, 15, 0, -1114089, 15, 0, -1114088, 15, 0, -1048573, 1, 65537, -1048572, 1, 131074, -1048571, 1, 131074, -1048570, 1, 131074, -1048569, 1, 196610, -1048568, 1, 196611, -1048563, 1, 196609, -1048562, 1, 131074, -1048561, 1, 131075, -1048555, 15, 0, -1048551, 17, 0, -983038, 1, 65537, -983037, 1, 131074, -983036, 1, 131074, -983035, 1, 131074, -983034, 1, 196611, -983026, 1, 131073, -983025, 1, 131074, -983024, 1, 65539, -983018, 1, 65537, -983017, 1, 65538, -983016, 1, 65538, -983015, 1, 65538, -917502, 1, 131073, -917501, 1, 131074, -917500, 1, 131074, -917499, 1, 196611, -917490, 1, 196609, -917489, 1, 131074, -917488, 1, 131074, -917487, 1, 65538, -917486, 1, 65538, -917485, 1, 65538, -917484, 1, 65538, -917483, 1, 65538, -917482, 1, 131074, -917481, 1, 131074, -917480, 1, 131074, -917479, 1, 131074, -851967, 1, 65537, -851966, 1, 131074, -851965, 1, 131074, -851964, 1, 131075, -851953, 1, 196609, -851952, 1, 196610, -851951, 1, 196610, -851950, 1, 196610, -851949, 1, 196610, -851948, 1, 196610, -851947, 1, 131074, -851946, 1, 131074, -851945, 1, 131074, -851944, 1, 131074, -851943, 1, 131074, -786431, 1, 131073, -786430, 1, 131074, -786429, 1, 131074, -786428, 1, 131075, -786411, 1, 196609, -786410, 1, 196610, -786409, 1, 196610, -786408, 1, 131074, -786407, 1, 131074, -720895, 1, 131073, -720894, 1, 131074, -720893, 1, 131074, -720892, 1, 196611, -720872, 1, 196609, -720871, 1, 131074, -655359, 1, 131073, -655358, 1, 131074, -655357, 1, 131075, -655352, 15, 0, -655347, 15, 0, -655346, 15, 0, -655335, 1, 131072, -589823, 1, 131073, -589822, 1, 131074, -589821, 1, 131075, -589817, 15, 0, -589815, 1, 65537, -589814, 1, 65538, -589813, 1, 65539, -589809, 15, 0, -589799, 1, 131072, -524287, 1, 196609, -524286, 1, 131074, -524285, 1, 131075, -524281, 1, 65537, -524280, 1, 65538, -524279, 1, 131074, -524278, 1, 196610, -524277, 1, 131074, -524276, 1, 65538, -524275, 1, 65538, -524274, 1, 65539, -524265, 19, 0, -524263, 1, 131072, -458750, 1, 131073, -458749, 1, 131074, -458748, 1, 65538, -458747, 1, 65538, -458746, 1, 65538, -458745, 1, 131074, -458744, 1, 131074, -458743, 1, 196611, -458741, 1, 196609, -458740, 1, 196610, -458739, 1, 131074, -458738, 1, 131074, -458737, 1, 65538, -458736, 1, 65538, -458735, 1, 65539, -458731, 1, 65537, -458730, 1, 65538, -458729, 1, 65538, -458728, 1, 65538, -458727, 1, 131074, -393214, 1, 196609, -393213, 1, 196610, -393212, 1, 131074, -393211, 1, 131074, -393210, 1, 131074, -393209, 1, 131074, -393208, 1, 196611, -393203, 1, 196609, -393202, 1, 196610, -393201, 1, 196610, -393200, 1, 196610, -393199, 1, 196611, -393195, 1, 131073, -393194, 1, 131074, -393193, 1, 131074, -393192, 1, 131074, -393191, 1, 131074, -327676, 1, 196609, -327675, 1, 196610, -327674, 1, 196610, -327673, 1, 196611, -327659, 1, 131073, -327658, 1, 131074, -327657, 1, 131074, -327656, 1, 131074, -327655, 1, 131074, -262123, 1, 131073, -262122, 1, 131074, -262121, 1, 131074, -262120, 1, 131074, -262119, 1, 131074, -196604, 15, 0, -196603, 15, 0, -196587, 1, 131073, -196586, 1, 131074, -196585, 1, 131074, -196584, 1, 131074, -196583, 1, 131074, -131055, 15, 0, -131051, 1, 131073, -131050, 1, 131074, -131049, 1, 131074, -131048, 1, 131074, -131047, 1, 131074, -65520, 15, 0, -65519, 15, 0, -65515, 1, 131073, -65514, 1, 131074, -65513, 1, 131074, -65512, 1, 131074, -65511, 1, 131074, 0, 1, 65538, 1, 1, 65538, 2, 1, 65539, 10, 0, 0, 16, 1, 65537, 17, 1, 65539, 21, 1, 131073, 22, 1, 131074, 23, 1, 131074, 24, 1, 131074, 25, 1, 131074, 65536, 1, 131074, 65537, 1, 131074, 65538, 1, 131074, 65539, 1, 65538, 65540, 1, 65538, 65541, 1, 65538, 65542, 1, 65538, 65543, 1, 65539, 65546, 0, 0, 65548, 1, 65537, 65549, 1, 65538, 65550, 1, 65538, 65551, 1, 65538, 65552, 1, 131074, 65553, 1, 131074, 65554, 1, 65538, 65555, 1, 65538, 65556, 1, 65538, 65557, 1, 131074, 65558, 1, 131074, 65559, 1, 131074, 65560, 1, 131074, 65561, 1, 131074, 131072, 1, 131074, 131073, 1, 131074, 131074, 1, 131074, 131075, 1, 131074, 131076, 1, 131074, 131077, 1, 131074, 131078, 1, 131074, 131079, 1, 131075, 131080, 21, 1, 131082, 1, 65537, 131083, 1, 65538, 131084, 1, 131074, 131085, 1, 131074, 131086, 1, 131074, 131087, 1, 131074, 131088, 1, 131074, 131089, 1, 131074, 131090, 1, 131074, 131091, 1, 131074, 131092, 1, 131074, 131093, 1, 131074, 131094, 1, 131074, 131095, 1, 131074, 131096, 1, 131074, 131097, 1, 131074, 196608, 1, 131074, 196609, 1, 131074, 196610, 1, 131074, 196611, 1, 131074, 196612, 1, 131074, 196613, 1, 131074, 196614, 1, 131074, 196615, 1, 131074, 196616, 1, 65538, 196617, 1, 65538, 196618, 1, 131074, 196619, 1, 131074, 196620, 1, 131074, 196621, 1, 131074, 196622, 1, 131074, 196623, 1, 131074, 196624, 1, 131074, 196625, 1, 131074, 196626, 1, 131074, 196627, 1, 131074, 196628, 1, 131074, 196629, 1, 131074, 196630, 1, 131074, 196631, 1, 131074, 196632, 1, 131074, 196633, 1, 131074, 262144, 1, 131074, 262145, 1, 131074, 262146, 1, 131074, 262147, 1, 131074, 262148, 1, 131074, 262149, 1, 131074, 262150, 1, 131074, 262151, 1, 131074, 262152, 1, 131074, 262153, 1, 131074, 262154, 1, 131074, 262155, 1, 131074, 262156, 1, 131074, 262157, 1, 131074, 262158, 1, 131074, 262159, 1, 131074, 262160, 1, 131074, 262161, 1, 131074, 262162, 1, 131074, 262163, 1, 131074, 262164, 1, 131074, 262165, 1, 131074, 262166, 1, 131074, 262167, 1, 131074, 262168, 1, 131074, 262169, 1, 131074]

mapping = get_id_mapping() # e.g. {(0, 0): (0, 0), (17, 0): (10, 0), (19, 0): (5, 0), (14, 0): (3, 0), ... }

## implement this function
def convert(lst):
    """
    :param lst:
    :return:

    given a list e.g. [-1376244, 1, 65537, -1376243, 1, 65538, -1376242, 1, 65538, ...]
    every 3 number if for a tile, that is tile1 have -1376244, 1, 65537, tile2 has -1376243, 1, 65538, ....
    the 3 numbers of a tile e.g. -1376244, 1, 65537. the second and third value (1, 65537) has a mapping in the dict mapping
    replace the values (1, 65537) (which is a key in mapping) to its value. this should be placed in the returned list at the end of the function

    """
    # Result list to hold the updated values
    updated_lst = lst.copy()  # Copying to avoid mutating the original list

    # Loop through the list in steps of 3 (because every 3 numbers represent a tile)
    for i in range(0, len(lst), 3):
        # Extract the second and third values (index i+1 and i+2)
        tile_data_1 = lst[i + 1]
        tile_data_2 = lst[i + 2]

        # Check if the pair (tile_data_1, tile_data_2) is in the mapping dictionary
        if (tile_data_1, tile_data_2) in mapping:
            # Get the new mapped value
            new_tile_data_1, new_tile_data_2 = mapping[(tile_data_1, tile_data_2)]

            # Replace the values in the updated list
            updated_lst[i + 1] = new_tile_data_1
            updated_lst[i + 2] = new_tile_data_2

    # Return the updated list
    return updated_lst


tile_data_gd43 = convert(to_convet)
print("tile_data_gd43: ", tile_data_gd43)

def get_string_with_padding(lst):
    """
    :param lst: a list of numbers. e.g [1, 2, 3, 4, 5, 6]
    :return: string with this format "layer_0/tile_data = PackedInt32Array( 1, 2, 3, 4, 5, 6 )"
    """
    # Convert the list of numbers to a comma-separated string
    list_str = ', '.join(map(str, lst))

    # Format the string in the required pattern
    return f"layer_0/tile_data = PackedInt32Array( {list_str} )"

print("tile_data_gd43: ", get_string_with_padding(tile_data_gd43))
